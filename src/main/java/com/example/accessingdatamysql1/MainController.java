package com.example.accessingdatamysql1;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    //curl http://localhost:8080/demo/add -d name=Last -d email=someemail@someemailprovider.com
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Create succes";
    }

    //curl http://localhost:8080/demo/all
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    // curl -X PUT -H "Content-Type: application/json" -d '{"name":"Name","email":"newemail@example.com"}' http://localhost:8080/demo/put/52
    @PutMapping(path = "/put/{id}")
    public @ResponseBody String updateUser(@PathVariable(value = "id") int id, @RequestBody User user) {
        User getUser = userRepository.findById(id).orElse(null);
        if (getUser == null) {
            return "User not found";
        }
        getUser.setName(user.getName());
        getUser.setEmail(user.getEmail());

        userRepository.save(getUser);
        return "Done update!";
    }


    // curl -X DELETE http://localhost:8080/demo/delete/1
    @DeleteMapping(path = "/delete/{id}")
    public @ResponseBody String deleteUser(@PathVariable(value = "id") int id) {
        userRepository.deleteById(id);
        return "Done delete";
    }
}